// ---------------------------------------------------
// # kickassGFX.net - Best Graphic Source - Free Themes, Scripts & Plugins 
// # ---------------------------------------------------
// # This file has been downloaded from KickassGFX.net
// # Homepage: http://www.kickassgfx.net/
// # ---------------------------------------------------
// # You'll find your Updates everyday at KickassGFX.net
// # ---------------------------------------------------
// # http://www.kickassgfx.net/
// # --------------------------------------------------- 
/*

Timeline 1.0

Date organised content slider.

Copyright (c) 2012 br0 (shindiristudio.com)

Project site: http://codecanyon.net/
Project demo: http://shindiristudio.com/timeline

*/
(function ($) {
    var t_methods = {
        init: function (options) {
            var settings = $.extend({
                'itemClass': '.item',
                'itemOpenClass': '.item_open',
                'openTriggerClass': '.item',
                'closeText': 'Close',
                'timelineWidth': 920,
                'itemWidth': 240,
                'itemOpenWidth': 490,
                'itemMargin': 10,
                'scrollSpeed': 500,
                'startItem': 'last',
                'easing': 'easeOutSine'
            }, options);
            var $this = this,
                $body = $('body'),
                $items = $this.find(settings.itemClass),
                $itemsOpen = $this.find(settings.itemOpenClass);
            $this.trigger('init.Timeline');
            var startIndex = $items.length - 1;
            if (settings.startItem == 'first') {
                startIndex = 0
            } else if (settings.startItem == 'last') {
                startIndex = $items.length - 1
            } else {
                $items.each(function (index) {
                    if (settings.startItem == $(this).attr('data-id')) {
                        startIndex = index;
                        return true
                    }
                })
            }
            $this.append('<div style="clear:both"></div>');
            $this.css({
                width: '100%',
                'overflow': 'hidden',
                marginLeft: 'auto',
                marginRight: 'auto',
                'text-align': 'center',
                height: 0
            });
            $this.wrapInner('<div class="timeline_items" />');
            $this.find('.timeline_items').css('text-align', 'left');
            $this.append('<div class="t_controles"><div class="t_left"></div><div class="t_right"></div></div>');
            $this.wrapInner('<div class="timeline_items_holder" />');
            $this.find('.timeline_items_holder').css({
                width: $this.width(),
                marginLeft: 'auto',
                marginRight: 'auto'
            });
            $items.css({
                width: settings.itemWidth,
                paddingLeft: 0,
                paddingRight: 0,
                marginLeft: settings.itemMargin / 2,
                marginRight: settings.itemMargin / 2,
                float: 'left',
                position: 'relative'
            });
            $itemsOpen.each(function () {
                $(this).prepend('<div class="t_close" data-id="' + $(this).attr('data-id') + '">' + settings.closeText + '</div>');
                $(this).wrapInner('<div class="' + settings.itemOpenClass + 'cwrapper"  />').find('div:first').css({
                    width: settings.itemOpenWidth,
                    position: 'relative'
                });
                $(this).css({
                    width: 0,
                    padding: 0,
                    marginLeft: settings.itemMargin / 2,
                    marginRight: settings.itemMargin / 2,
                    float: 'left',
                    display: 'none',
                    position: 'relative',
                    overflow: 'hidden'
                })
            });
            var $iholder = $this.find('.timeline_items:first'),
                $line = $this.find('.t_line_wrapper:first'),
                margin = $this.width() / 2 - (settings.itemWidth + settings.itemMargin) * (1 / 2 + startIndex),
                width = (settings.itemWidth + settings.itemMargin) * $items.length + (settings.itemOpenWidth + settings.itemMargin) + 50,
                data = $this.data('timeline');
            $iholder.css({
                width: width,
                marginLeft: margin
            });
            if (!data) {
                $this.data('timeline', {
                    currentIndex: startIndex,
                    itemCount: $items.length,
                    margin: margin,
                    lineMargin: 0,
                    lineViewCount: 0,
                    options: settings,
                    items: $items,
                    iholder: $iholder,
                    open: false
                })
            }
            $this.timeline('createElements');
            $(document).keydown(function (e) {
                if (e.keyCode == 37) {
                    $this.timeline('left');
                    return false
                }
                if (e.keyCode == 39) {
                    $this.timeline('right');
                    return false
                }
            });
            $this.find('.t_left').click(function () {
                $this.timeline('left')
            });
            $this.find('.t_right').click(function () {
                $this.timeline('right')
            });
            $this.find(settings.openTriggerClass).click(function () {
                $this.timeline('goTo', $(this).attr('data-id'), true)
            });
            $this.find('.t_close').click(function () {
                $this.timeline('close', $(this).attr('data-id'))
            });
            $this.css({
                height: 'auto'
            }).show();
            return $this
        },
        destroy: function () {
            var $this = this,
                data = $this.data('timeline');
            data.currentIndex.remove();
            data.itemCount.remove();
            data.margin.remove();
            data.lineMargin.remove();
            data.lineViewCount.remove();
            data.options.remove();
            data.items.remove();
            data.iholder.remove();
            data.open.remove();
            $this.removeData('timeline')
        },
        open: function (id) {
            var $this = this,
                data = $this.data('timeline'),
                $items = $this.find(data.options.itemOpenClass),
                speed = data.options.scrollSpeed,
                width = data.options.itemOpenWidth,
                easing = data.options.easing;
            $items.each(function () {
                if ($(this).attr('data-id') == id) {
                    $this.trigger('itemOpen.Timeline');
                    $(this).stop(true).show().animate({
                        width: width
                    }, speed, easing);
                    data.margin -= (width + data.options.itemMargin + data.options.itemWidth) / 2 - data.options.itemWidth / 2;
                    data.iholder.stop(true).animate({
                        marginLeft: data.margin
                    }, speed, easing);
                    data.open = id
                }
            });
            return $this
        },
        close: function (id, idOpen) {
            var $this = this,
                data = $this.data('timeline'),
                $items = $this.find(data.options.itemOpenClass),
                speed = data.options.scrollSpeed,
                width = data.options.itemOpenWidth,
                easing = data.options.easing;
            $items.each(function () {
                if ($(this).attr('data-id') == id) {
                    $this.trigger('itemClose.Timeline');
                    $(this).stop(true).animate({
                        width: 0
                    }, speed, easing, function () {
                        $(this).hide()
                    });
                    data.margin += (width + data.options.itemMargin) / 2;
                    data.iholder.stop(true).animate({
                        marginLeft: data.margin
                    }, speed, easing);
                    data.open = false
                }
            });
            if (idOpen) {
                $this.timeline('open', idOpen)
            }
            return $this
        },
        right: function () {
            var $this = this,
                data = $this.data('timeline'),
                speed = data.options.scrollSpeed,
                easing = data.options.easing;
            if (data.currentIndex < data.itemCount - 1) {
                var dataId = data.items.eq(data.currentIndex + 1).attr('data-id');
                $this.timeline('goTo', dataId)
            } else {
                data.iholder.stop(true).animate({
                    marginLeft: data.margin - 50
                }, speed / 2, easing).animate({
                    marginLeft: data.margin
                }, speed / 2, easing)
            }
            return $this
        },
        left: function () {
            var $this = this,
                data = $this.data('timeline'),
                speed = data.options.scrollSpeed,
                easing = data.options.easing;
            if (data.currentIndex > 0) {
                var dataId = data.items.eq(data.currentIndex - 1).attr('data-id');
                $this.timeline('goTo', dataId)
            } else {
                data.iholder.stop(true).animate({
                    marginLeft: data.margin + 50
                }, speed / 2, easing).animate({
                    marginLeft: data.margin
                }, speed / 2, easing)
            }
            return $this
        },
        goTo: function (id, openElement) {
            var $this = this,
                data = $this.data('timeline'),
                speed = data.options.scrollSpeed,
                easing = data.options.easing,
                $items = data.items,
                count = -1,
                found = false;
            $items.each(function (index) {
                if (id == $(this).attr('data-id')) {
                    found = true;
                    count = index;
                    return true
                }
            });
            if (found) {
                var $nodes = $this.find('.t_line_node');
                $nodes.removeClass('active');
                data.lineMargin = -parseInt($nodes.parent().parent().find('[href="#' + id + '"]').addClass('active').parent().parent().attr('data-id'), 10) * data.options.timelineWidth;
                $this.find('.t_line_wrapper').stop(true).animate({
                    marginLeft: data.lineMargin
                }, speed, easing);
                if (data.open) {
                    $this.timeline('close', data.open, id)
                } else if (openElement) {
                    $this.timeline('open', id)
                }
                $this.trigger('scrollStart.Timeline');
                var multiply = data.currentIndex - count;
                data.currentIndex = count;
                data.margin += (data.options.itemWidth + data.options.itemMargin) * multiply;
                data.iholder.stop(true).animate({
                    marginLeft: data.margin
                }, speed + (speed / 5) * (Math.abs(multiply) - 1), easing, function () {
                    $this.trigger('scrollStop.Timeline')
                })
            }
            return $this
        },
        lineLeft: function () {
            var $this = this,
                data = $this.data('timeline'),
                speed = data.options.scrollSpeed,
                easing = data.options.easing;
            if (data.lineMargin != 0) {
                data.lineMargin += data.options.timelineWidth;
                $this.find('.t_line_wrapper').stop(true).animate({
                    marginLeft: data.lineMargin
                }, speed, easing)
            }
        },
        lineRight: function () {
            var $this = this,
                data = $this.data('timeline'),
                speed = data.options.scrollSpeed,
                easing = data.options.easing;
            if (data.lineMargin != -(data.lineViewCount - 1) * data.options.timelineWidth) {
                data.lineMargin -= data.options.timelineWidth;
                $this.find('.t_line_wrapper').stop(true).animate({
                    marginLeft: data.lineMargin
                }, speed, easing)
            }
        },
        createElements: function () {
            var $this = this,
                data = $this.data('timeline'),
                $items = data.items,
                minM = 13,
                minY = 3000,
                maxM = 0,
                cnt = 0,
                maxY = 0,
                nodes = new Array(),
                months = ['', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            monthsDays = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            $items.each(function () {
                var dataId = $(this).attr('data-id'),
                    dataDesc = $(this).attr('data-description'),
                    d = parseInt(dataId.substr(0, 2), 10),
                    m = parseInt(dataId.substr(3, 2), 10),
                    y = parseInt(dataId.substr(6, 4), 10);
                maxY = Math.max(maxY, y);
                maxM = Math.max(maxM, m);
                minY = Math.min(minY, y);
                minM = Math.min(minM, m);
                nodes[dataId] = '<a href="#' + dataId + '" class="t_line_node' + (cnt == data.currentIndex ? ' active' : '') + '" style="left: ' + ((data.options.timelineWidth - 25) / 2 / monthsDays[m]) * d + 'px; position:absolute; text-align:center;">' + d;
                if (typeof dataDesc != 'undefined') nodes[dataId] += '<span class="t_node_desc" style="' + (m % 2 == 0 ? 'right : 0; ' : '') + 'white-space:nowrap; position:absolute;">' + dataDesc + '</span>';
                nodes[dataId] += '</a>\n';
                cnt++
            });
            var html = '\n' + '    <div class="timeline_line" style="text-align: left; width:' + data.options.timelineWidth + 'px; position:relative; margin-left:auto; margin-right:auto;">\n' + '		<div id="t_line_left" style="position: absolute;"></div><div id="t_line_right" style="position: absolute;"></div>\n' + '		<div class="t_line_holder" style="position:relative; overflow: hidden; width:100%;">\n' + '			<div class="t_line_wrapper">\n';
            cnt = 0;
            if (maxM > 0) {
                if (minM % 2 == 0) minM--;
                if (maxM % 2 == 0) {
                    if (maxM == 12) {
                        maxM = 1;
                        maxY++
                    } else maxM++
                } else {
                    maxM += 2
                }
                while (minY != maxY || minM != maxM) {
                    html += '				<div class="t_line_view" data-id="' + cnt + '" style="position:relative; float:left; width:' + data.options.timelineWidth + 'px">\n' + '					<h3 class="t_line_year" style="text-align:center;">' + minY + '</h3>\n' + '					<div class="t_line_m" style="width:' + (data.options.timelineWidth / 2 - 1) + 'px; position:absolute; top:0;">\n' + '						<h4 class="t_line_month" style="position:abolute; width:100% top:0; text-align:center;">' + months[minM] + '</h4>\n';
                    for (var x in nodes) {
                        var m = parseInt(x.substr(3, 2), 10),
                            y = parseInt(x.substr(6, 4), 10);
                        if (m == minM && y == minY) {
                            html += nodes[x];
                            nodes.splice(x, 1)
                        }
                    }
                    minM++;
                    html += '					</div>\n' + '					<div class="t_line_m right" style="left:' + (data.options.timelineWidth / 2 - 1) + 'px; width:' + (data.options.timelineWidth / 2 - 1) + 'px; position:absolute; top:0;">\n' + '						<h4 class="t_line_month" style="position:abolute; width:100% top:0; text-align:center;">' + months[minM] + '</h4>\n';
                    for (var x in nodes) {
                        m = parseInt(x.substr(3, 2), 10);
                        y = parseInt(x.substr(6, 4), 10);
                        if (m == minM && y == minY) {
                            html += nodes[x];
                            nodes.splice(x, 1)
                        }
                    }
                    html += '					</div>\n' + '					<div style="clear:both"></div>\n' + '				</div>\n';
                    if (minM == 11) {
                        minM = 1;
                        minY++
                    } else {
                        minM++
                    }
                    cnt++
                }
            }
            html += '\n' + '				<div style="clear:both"></div>\n' + '			</div>\n' + '		</div>\n' + '	</div>\n';
            data.lineViewCount = cnt;
            $this.prepend(html);
            $this.find('.t_line_wrapper').css({
                width: data.options.timelineWidth * cnt
            });
            $this.find('.t_line_node').each(function () {
                if ($(this).width() < 10) $(this).width(10);
                $(this).css({
                    marginLeft: -$(this).width() / 2
                });
                $(this).find('span').hide();
                $(this).hover(function () {
                    $(this).find('span').show()
                }, function () {
                    $(this).find('span').hide()
                });
                if ($(this).hasClass('active')) {
                    data.lineMargin = -parseInt($(this).parent().parent('.t_line_view').attr('data-id'), 10) * data.options.timelineWidth;
                    $this.find('.t_line_wrapper').css('margin-left', data.lineMargin + 'px')
                }
                $(this).click(function (e) {
                    e.preventDefault();
                    $this.find('.t_line_node').removeClass('active');
                    $(this).addClass('active');
                    $this.timeline('goTo', $(this).attr('href').substr(1))
                })
            });
            $this.find('#t_line_left').click(function () {
                $this.timeline('lineLeft')
            });
            $this.find('#t_line_right').click(function () {
                $this.timeline('lineRight')
            })
        }
    };
    $.fn.timeline = function (method) {
        if (t_methods[method]) {
            return t_methods[method].apply(this, Array.prototype.slice.call(arguments, 1))
        } else if (typeof method === 'object' || !method) {
            return t_methods.init.apply(this, arguments)
        } else {
            $.error('Method ' + method + ' does not exist on jQuery.timeline')
        }
    }
})(jQuery);